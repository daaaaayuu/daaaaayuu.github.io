[{"categories":["Spring Boot"],"contents":"Hello World\n我是幼幼\n一級 二級 ######六級\n我是阿財，喜歡學習\n 阿財  QOQ  哈哈哈哈     HAAAA   喔喔喔  QQQ   欸欸欸欸   Hello\n GITHUB\nBLOG\n我是幼幼Hello\nif(){\r}else{\r}\r   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    安安安安 ","permalink":"https://daaaaayuu.github.io/blog/test/","tags":["Good","BAD"],"title":"阿佑ㄉ測試"},{"categories":["Spring Boot"],"contents":"有空時花大概1小時左右學習微服務相關技術直到懶惰或學不動為止 2024/06/19 Day1  Spring Boot篇\n 1.IOC(控制反轉與依賴注入) 是一種將新建和管理的工作交給Spring容器，開發者只需要定義對象的依賴關係，而不需要關心創建與初始化過程。 這樣讓程式更加模組化，並提高了程式的可維護性。 基本創建bean:@Component 初始化bean:@PostConstruct 注入bean:@Autowired;如有多個同類的可以搭配@Qualifier\n2.AOP:切面導向設計，就是將共通邏輯寫在切面，由切面統一去處理 在class上加上@Aspect+@Component就可以創建切面 常搭配的註解有@Before、@After、@Around 最常使用在權限驗證、統一的exception、Log紀錄\n*New~~* **一.取得請求參數** @RequestParam取得URL參數 1.未定義的參數Spring Boot會忽略 2.少傳參數會error 3.required = false可以讓參數忽略 4.defaultValue = \u0026ldquo;22\u0026rdquo;，可以預設值 5.『http://localhost:8080/test?id=123』，是把id當成一般的url請求參數來傳遞\n@RequestMapping(\u0026#34;/test1\u0026#34;)\rpublic String test1(@RequestParam(defaultValue = \u0026#34;22\u0026#34;) Integer id,\r@RequestParam(required = false) String name),\r@RequestParam String age){\rSystem.out.println(\u0026#34;id :\u0026#34;+id);\rSystem.out.println(\u0026#34;name :\u0026#34;+name);\rSystem.out.println(\u0026#34;age :\u0026#34;+age);\rreturn \u0026#34;Hello test1\u0026#34;;\r}\r@RequestBody取得Body參數 1.加在method，可取得RequestBody的參數 2.body多加參數,沒定義的話，一樣可以執行，但Spring Boot會忽略掉此參數 3.body少加參數一樣可以執行\n@RequestMapping(\u0026#34;/test2\u0026#34;)\rpublic String test2(@RequestBody Student student){\rSystem.out.println(\u0026#34;Student id: \u0026#34;+student.getId());\rSystem.out.println(\u0026#34;Student name: \u0026#34;+student.getName());\rreturn \u0026#34;Hello test2\u0026#34;;\r}\r@RequestHeader取的Header參數 1.name = \u0026ldquo;Content-Type\u0026rdquo;，指定參數，跟@RequestParam一樣，但比較常使用到 2.required = false可以讓參數忽略 3.API文件上很常要取Header資訊，例如token之類的\n@RequestMapping(\u0026#34;/test3\u0026#34;)\rpublic String test3(@RequestHeader String info){\rSystem.out.println(\u0026#34;Header info: \u0026#34;+info);\rreturn \u0026#34;Hello test3\u0026#34;;\r}\r@PathVariable取的URL的值 1.跟@RequestParam不太一樣 2.『http://localhost:8080/test/123』，是把123放進url路徑裡面來傳遞\n@RequestMapping(\u0026#34;/test4/{id}/{name}\u0026#34;)\rpublic String test4(@PathVariable Integer id,\r@PathVariable String name){\rSystem.out.println(\u0026#34;PathVariable id: \u0026#34;+id);\rSystem.out.println(\u0026#34;PathVariable name: \u0026#34;+name);\rreturn \u0026#34;Hello test4\u0026#34;;\r}\r二.了解如何設計RESTful API 設計的API符合REST風格，就是RESTful API，目的:簡化溝通成本， REST只是一個風格，依情境選擇適當的作法即可\n1.使用http method表示動作 POST/Create(新增)/新增一個資源 GET/Read(查詢)/取得一個資源 PUT/Update(修改)/更新一個已存在的資源 DELETE/Delete(刪除)/刪除一個資源\n2.使用url路徑描述資源之間的階層關係\n   階層 說明     GET/users 取得所有user   GET/users/123 取得user id為123的user   GET/users/123/articles 取得user id為123的user所寫的文章   GET/users/123/articles/456 取得user id為123的user所寫的article id為456的文章    每一個/代表一個階層(子集合的概念)\n3.response body返回json或是xml格式 當class加上@RestController就是符合Rest風格的Controller，所有方法的返回值都是json\n","permalink":"https://daaaaayuu.github.io/blog/sringbootday1/","tags":["JAVA","SpringBoot"],"title":"2024/06/19 Day1"}]